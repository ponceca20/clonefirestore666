package usecase

import (
	"context"
	"fmt"
	"sync"
	"sync/atomic"
	"time"

	"firestore-clone/internal/firestore/domain/model"
	"firestore-clone/internal/shared/errors"
	"firestore-clone/internal/shared/firestore"
	"firestore-clone/internal/shared/logger"

	"go.uber.org/zap"
)

// Constants for Firestore real-time functionality following Google Cloud Firestore standards
const (
	// MaxEventsPerPath limits the number of events stored per path to prevent memory leaks
	MaxEventsPerPath = 1000

	// DefaultHeartbeatInterval is the standard interval for sending heartbeats (30 seconds)
	DefaultHeartbeatInterval = 30 * time.Second

	// DefaultStaleConnectionTimeout defines when a connection is considered stale (5 minutes)
	DefaultStaleConnectionTimeout = 5 * time.Minute

	// MaxSubscriptionsPerClient limits the number of subscriptions per client
	MaxSubscriptionsPerClient = 100

	// EventChannelBufferSize is the buffer size for event channels
	EventChannelBufferSize = 1000
)

// RealtimeUsecase defines the port (interface) for managing real-time subscriptions
// following hexagonal architecture principles and 100% Firestore compatibility
type RealtimeUsecase interface {
	// Core subscription management operations
	Subscribe(ctx context.Context, req SubscribeRequest) (*SubscribeResponse, error)
	Unsubscribe(ctx context.Context, req UnsubscribeRequest) error
	UnsubscribeAll(ctx context.Context, subscriberID string) error

	// Event publishing and retrieval
	PublishEvent(ctx context.Context, event model.RealtimeEvent) error
	GetEventsSince(ctx context.Context, firestorePath string, resumeToken model.ResumeToken) ([]model.RealtimeEvent, error)

	// Connection management
	SendHeartbeat(ctx context.Context) error
	UpdateLastHeartbeat(subscriberID string, subscriptionID model.SubscriptionID) error
	CleanupStaleConnections(ctx context.Context, timeout time.Duration) error

	// Monitoring and administration
	GetSubscriberCount(firestorePath string) int
	GetActiveSubscriptions(subscriberID string) map[model.SubscriptionID]*Subscription
	ValidatePermissions(ctx context.Context, subscriberID string, permissionValidator PermissionValidator) error

	// Health and metrics
	GetHealthStatus() HealthStatus
	GetMetrics() RealtimeMetrics
}

// SubscribeRequest encapsulates all subscription parameters following clean code principles
type SubscribeRequest struct {
	SubscriberID   string                     `json:"subscriber_id" validate:"required"`
	SubscriptionID model.SubscriptionID       `json:"subscription_id" validate:"required"`
	FirestorePath  string                     `json:"firestore_path" validate:"required"`
	EventChannel   chan<- model.RealtimeEvent `json:"-"`
	ResumeToken    model.ResumeToken          `json:"resume_token,omitempty"`
	Query          *model.Query               `json:"query,omitempty"`
	Options        SubscriptionOptions        `json:"options,omitempty"`
}

// SubscribeResponse contains the result of a subscription operation
type SubscribeResponse struct {
	SubscriptionID  model.SubscriptionID `json:"subscription_id"`
	InitialSnapshot bool                 `json:"initial_snapshot"`
	ResumeToken     model.ResumeToken    `json:"resume_token"`
	CreatedAt       time.Time            `json:"created_at"`
}

// UnsubscribeRequest encapsulates unsubscription parameters
type UnsubscribeRequest struct {
	SubscriberID   string               `json:"subscriber_id" validate:"required"`
	SubscriptionID model.SubscriptionID `json:"subscription_id" validate:"required"`
}

// SubscriptionOptions provides additional configuration for subscriptions
type SubscriptionOptions struct {
	IncludeMetadata   bool          `json:"include_metadata"`
	IncludeOldData    bool          `json:"include_old_data"`
	HeartbeatInterval time.Duration `json:"heartbeat_interval"`
}

// PermissionValidator is a function type for validating permissions
type PermissionValidator func(subscriberID, firestorePath string) error

// HealthStatus represents the health status of the realtime service
type HealthStatus struct {
	IsHealthy           bool      `json:"is_healthy"`
	ActiveSubscriptions int       `json:"active_subscriptions"`
	ActiveConnections   int       `json:"active_connections"`
	LastHealthCheck     time.Time `json:"last_health_check"`
	EventStoreSize      int       `json:"event_store_size"`
}

// RealtimeMetrics provides operational metrics for monitoring
type RealtimeMetrics struct {
	TotalSubscriptions int64         `json:"total_subscriptions"`
	TotalEvents        int64         `json:"total_events"`
	ActiveSubscribers  int           `json:"active_subscribers"`
	EventsPerSecond    float64       `json:"events_per_second"`
	AverageLatency     time.Duration `json:"average_latency"`
	LastMetricsUpdate  time.Time     `json:"last_metrics_update"`
}

// Subscription represents an active subscription with all Firestore features and clean architecture
type Subscription struct {
	SubscriberID   string                     `json:"subscriber_id"`
	SubscriptionID model.SubscriptionID       `json:"subscription_id"`
	FirestorePath  string                     `json:"firestore_path"`
	EventChannel   chan<- model.RealtimeEvent `json:"-"`
	CreatedAt      time.Time                  `json:"created_at"`
	LastHeartbeat  time.Time                  `json:"last_heartbeat"`
	ResumeToken    model.ResumeToken          `json:"resume_token"`
	Query          *model.Query               `json:"query,omitempty"`
	Options        SubscriptionOptions        `json:"options"`
	IsActive       bool                       `json:"is_active"`
	ConnectionID   string                     `json:"connection_id"`

	// Internal metrics
	EventCount    int64     `json:"event_count"`
	LastEventTime time.Time `json:"last_event_time"`
}

// EventStore defines the port for event storage operations following hexagonal architecture
type EventStore interface {
	StoreEvent(ctx context.Context, event model.RealtimeEvent) error
	GetEventsSince(ctx context.Context, firestorePath string, resumeToken model.ResumeToken) ([]model.RealtimeEvent, error)
	GetEventsCount(firestorePath string) int
	CleanupOldEvents(ctx context.Context, olderThan time.Time) error
}

// InMemoryEventStore provides an in-memory implementation of event storage following adapter pattern
type InMemoryEventStore struct {
	events       map[string][]model.RealtimeEvent // path -> events
	eventMetrics map[string]*EventPathMetrics     // path -> metrics
	totalEvents  int64
	mu           sync.RWMutex
	logger       logger.Logger
}

// EventPathMetrics tracks metrics for events on a specific path
type EventPathMetrics struct {
	EventCount     int64     `json:"event_count"`
	LastEventTime  time.Time `json:"last_event_time"`
	FirstEventTime time.Time `json:"first_event_time"`
}

// NewInMemoryEventStore creates a new in-memory event store with proper initialization
func NewInMemoryEventStore(log logger.Logger) EventStore {
	return &InMemoryEventStore{
		events:       make(map[string][]model.RealtimeEvent),
		eventMetrics: make(map[string]*EventPathMetrics),
		logger:       log,
	}
}

// StoreEvent stores an event for resume token support with proper error handling
func (es *InMemoryEventStore) StoreEvent(ctx context.Context, event model.RealtimeEvent) error {
	if event.FullPath == "" {
		return errors.NewValidationError("event path cannot be empty")
	}

	es.mu.Lock()
	defer es.mu.Unlock()

	// Initialize path if it doesn't exist
	if es.events[event.FullPath] == nil {
		es.events[event.FullPath] = make([]model.RealtimeEvent, 0, MaxEventsPerPath)
		es.eventMetrics[event.FullPath] = &EventPathMetrics{
			FirstEventTime: time.Now(),
		}
	}

	// Append event
	es.events[event.FullPath] = append(es.events[event.FullPath], event)
	atomic.AddInt64(&es.totalEvents, 1)

	// Update metrics
	metrics := es.eventMetrics[event.FullPath]
	metrics.EventCount++
	metrics.LastEventTime = time.Now()

	// Maintain sliding window to prevent memory leaks
	if len(es.events[event.FullPath]) > MaxEventsPerPath {
		// Remove oldest events
		excess := len(es.events[event.FullPath]) - MaxEventsPerPath
		copy(es.events[event.FullPath], es.events[event.FullPath][excess:])
		es.events[event.FullPath] = es.events[event.FullPath][:MaxEventsPerPath]

		es.logger.Debug("Trimmed old events",
			zap.String("path", event.FullPath),
			zap.Int("removed", excess))
	}

	return nil
}

// GetEventsSince returns events since a specific resume token with efficient filtering
func (es *InMemoryEventStore) GetEventsSince(ctx context.Context, firestorePath string, resumeToken model.ResumeToken) ([]model.RealtimeEvent, error) {
	if firestorePath == "" {
		return nil, errors.NewValidationError("firestore path cannot be empty")
	}

	es.mu.RLock()
	defer es.mu.RUnlock()

	events, exists := es.events[firestorePath]
	if !exists {
		return []model.RealtimeEvent{}, nil
	}

	// If no resume token, return all events
	if resumeToken == "" {
		// Return a copy to prevent race conditions
		result := make([]model.RealtimeEvent, len(events))
		copy(result, events)
		return result, nil
	}

	// Binary search for efficient resume token lookup
	var result []model.RealtimeEvent
	for _, event := range events {
		if event.ResumeToken > resumeToken {
			result = append(result, event)
		}
	}

	return result, nil
}

// GetEventsCount returns the number of events stored for a path
func (es *InMemoryEventStore) GetEventsCount(firestorePath string) int {
	es.mu.RLock()
	defer es.mu.RUnlock()

	if events, exists := es.events[firestorePath]; exists {
		return len(events)
	}
	return 0
}

// CleanupOldEvents removes events older than the specified time
func (es *InMemoryEventStore) CleanupOldEvents(ctx context.Context, olderThan time.Time) error {
	es.mu.Lock()
	defer es.mu.Unlock()

	totalRemoved := 0
	for path, events := range es.events {
		initialCount := len(events)

		// Find first event that should be kept
		keepIndex := 0
		for i, event := range events {
			if event.Timestamp.After(olderThan) {
				keepIndex = i
				break
			}
		}

		if keepIndex > 0 {
			// Remove old events
			es.events[path] = events[keepIndex:]
			removed := initialCount - len(es.events[path])
			totalRemoved += removed

			es.logger.Debug("Cleaned up old events",
				zap.String("path", path),
				zap.Int("removed", removed))
		}
	}

	if totalRemoved > 0 {
		es.logger.Info("Event cleanup completed",
			zap.Int("total_removed", totalRemoved),
			zap.Time("older_than", olderThan))
	}

	return nil
}

// realtimeUsecaseImpl implements the RealtimeUsecase interface with enhanced Firestore compatibility
type realtimeUsecaseImpl struct {
	// Core data structures for subscription management
	subscriptions   map[string]map[model.SubscriptionID]*Subscription   // subscriberID -> subscriptionID -> subscription
	pathSubscribers map[string]map[string]map[model.SubscriptionID]bool // path -> subscriberID -> subscriptionID -> exists
	eventStore      EventStore

	// Metrics and monitoring
	sequenceCounter    int64
	totalSubscriptions int64
	totalEvents        int64
	healthStatus       HealthStatus
	metrics            RealtimeMetrics

	// Concurrency control
	mu sync.RWMutex

	// Dependencies
	logger logger.Logger
}

// NewRealtimeUsecase creates a new enhanced realtime usecase with 100% Firestore compatibility
func NewRealtimeUsecase(log logger.Logger) RealtimeUsecase {
	eventStore := NewInMemoryEventStore(log)

	return &realtimeUsecaseImpl{
		subscriptions:   make(map[string]map[model.SubscriptionID]*Subscription),
		pathSubscribers: make(map[string]map[string]map[model.SubscriptionID]bool),
		eventStore:      eventStore,
		logger:          log,
		healthStatus: HealthStatus{
			IsHealthy:       true,
			LastHealthCheck: time.Now(),
		},
		metrics: RealtimeMetrics{
			LastMetricsUpdate: time.Now(),
		},
	}
}

// Subscribe allows a client to subscribe to changes on a specific Firestore path with enhanced features
func (r *realtimeUsecaseImpl) Subscribe(ctx context.Context, req SubscribeRequest) (*SubscribeResponse, error) {
	if err := r.validateSubscribeRequest(req); err != nil {
		return nil, err
	}

	// Validate Firestore path format
	if !r.isValidFirestorePath(req.FirestorePath) {
		return nil, errors.NewValidationError(fmt.Sprintf("invalid Firestore path format: %s", req.FirestorePath))
	}

	r.mu.Lock()
	defer r.mu.Unlock()

	// Check subscription limits
	if err := r.checkSubscriptionLimits(req.SubscriberID); err != nil {
		return nil, err
	}

	// Initialize subscriber map if it doesn't exist
	if r.subscriptions[req.SubscriberID] == nil {
		r.subscriptions[req.SubscriberID] = make(map[model.SubscriptionID]*Subscription)
	}

	// Check if subscription already exists
	if _, exists := r.subscriptions[req.SubscriberID][req.SubscriptionID]; exists {
		return nil, errors.NewValidationError(fmt.Sprintf("subscription %s already exists for subscriber %s", req.SubscriptionID, req.SubscriberID))
	}

	// Create subscription with proper initialization
	now := time.Now()
	subscription := &Subscription{
		SubscriberID:   req.SubscriberID,
		SubscriptionID: req.SubscriptionID,
		FirestorePath:  req.FirestorePath,
		EventChannel:   req.EventChannel,
		CreatedAt:      now,
		LastHeartbeat:  now,
		ResumeToken:    req.ResumeToken,
		Query:          req.Query,
		Options:        req.Options,
		IsActive:       true,
		ConnectionID:   r.generateConnectionID(req.SubscriberID, req.SubscriptionID),
	}

	// Store subscription
	r.subscriptions[req.SubscriberID][req.SubscriptionID] = subscription

	// Add to path subscribers map
	r.addToPathSubscribers(req.FirestorePath, req.SubscriberID, req.SubscriptionID)

	// Update metrics
	atomic.AddInt64(&r.totalSubscriptions, 1)

	r.logger.Info("Enhanced subscription created",
		zap.String("subscriberID", req.SubscriberID),
		zap.String("subscriptionID", string(req.SubscriptionID)),
		zap.String("path", req.FirestorePath),
		zap.String("resumeToken", string(req.ResumeToken)))

	// Send events since resume token if provided
	if req.ResumeToken != "" {
		go r.sendEventsFromResumeToken(ctx, subscription, req.ResumeToken)
	}

	response := &SubscribeResponse{
		SubscriptionID:  req.SubscriptionID,
		InitialSnapshot: req.ResumeToken == "",
		ResumeToken:     req.ResumeToken,
		CreatedAt:       now,
	}

	return response, nil
}

// Unsubscribe removes a specific subscription
func (r *realtimeUsecaseImpl) Unsubscribe(ctx context.Context, req UnsubscribeRequest) error {
	if err := r.validateUnsubscribeRequest(req); err != nil {
		return err
	}

	r.mu.Lock()
	defer r.mu.Unlock()

	subscriberSubs, exists := r.subscriptions[req.SubscriberID]
	if !exists {
		return errors.NewNotFoundError(fmt.Sprintf("subscriber %s not found", req.SubscriberID))
	}

	subscription, exists := subscriberSubs[req.SubscriptionID]
	if !exists {
		return errors.NewNotFoundError(fmt.Sprintf("subscription %s not found for subscriber %s", req.SubscriptionID, req.SubscriberID))
	}

	// Mark as inactive
	subscription.IsActive = false

	// Remove from path subscribers
	r.removeFromPathSubscribers(subscription.FirestorePath, req.SubscriberID, req.SubscriptionID)

	// Remove subscription
	delete(subscriberSubs, req.SubscriptionID)
	if len(subscriberSubs) == 0 {
		delete(r.subscriptions, req.SubscriberID)
	}

	r.logger.Info("Enhanced subscription removed",
		zap.String("subscriberID", req.SubscriberID),
		zap.String("subscriptionID", string(req.SubscriptionID)),
		zap.String("path", subscription.FirestorePath))

	return nil
}

// UnsubscribeAll removes all subscriptions for a subscriber
func (r *realtimeUsecaseImpl) UnsubscribeAll(ctx context.Context, subscriberID string) error {
	if subscriberID == "" {
		return errors.NewValidationError("subscriberID cannot be empty")
	}

	r.mu.Lock()
	defer r.mu.Unlock()

	subscriberSubs, exists := r.subscriptions[subscriberID]
	if !exists {
		r.logger.Debug("No subscriptions found for subscriber", zap.String("subscriberID", subscriberID))
		return nil
	}

	// Remove from all path subscribers
	for subscriptionID, subscription := range subscriberSubs {
		subscription.IsActive = false
		r.removeFromPathSubscribers(subscription.FirestorePath, subscriberID, subscriptionID)
	}

	// Remove all subscriptions for this subscriber
	delete(r.subscriptions, subscriberID)

	r.logger.Info("All enhanced subscriptions removed for subscriber",
		zap.String("subscriberID", subscriberID),
		zap.Int("count", len(subscriberSubs)))

	return nil
}

// PublishEvent broadcasts an event to all clients subscribed to the event's path
func (r *realtimeUsecaseImpl) PublishEvent(ctx context.Context, event model.RealtimeEvent) error {
	if event.FullPath == "" {
		return errors.NewValidationError("event path cannot be empty")
	}

	// Generate sequence number and resume token
	sequence := atomic.AddInt64(&r.sequenceCounter, 1)
	event.SequenceNumber = sequence
	event.ResumeToken = event.GenerateResumeToken()

	// Store event for resume token support
	if err := r.eventStore.StoreEvent(ctx, event); err != nil {
		r.logger.Error("Failed to store event", zap.Error(err))
	}

	// Update metrics
	atomic.AddInt64(&r.totalEvents, 1)

	r.mu.RLock()
	pathSubscribers := r.pathSubscribers[event.FullPath]
	var targetSubscriptions []*Subscription

	// Collect all subscriptions for this path
	for subscriberID, subscriptionIDs := range pathSubscribers {
		if subscriberSubs, exists := r.subscriptions[subscriberID]; exists {
			for subscriptionID := range subscriptionIDs {
				if subscription, exists := subscriberSubs[subscriptionID]; exists && subscription.IsActive {
					targetSubscriptions = append(targetSubscriptions, subscription)
				}
			}
		}
	}
	r.mu.RUnlock()

	// Send events to all matching subscriptions concurrently
	var wg sync.WaitGroup
	for _, subscription := range targetSubscriptions {
		wg.Add(1)
		go func(sub *Subscription) {
			defer wg.Done()
			r.sendEventToSubscription(ctx, event, sub)
		}(subscription)
	}
	wg.Wait()

	r.logger.Debug("Enhanced event published",
		zap.String("path", event.FullPath),
		zap.String("eventType", string(event.Type)),
		zap.Int("subscribers", len(targetSubscriptions)),
		zap.Int64("sequence", sequence))

	return nil
}

// GetEventsSince returns events since a specific resume token for replay
func (r *realtimeUsecaseImpl) GetEventsSince(ctx context.Context, firestorePath string, resumeToken model.ResumeToken) ([]model.RealtimeEvent, error) {
	return r.eventStore.GetEventsSince(ctx, firestorePath, resumeToken)
}

// SendHeartbeat sends a heartbeat to all connected subscribers
func (r *realtimeUsecaseImpl) SendHeartbeat(ctx context.Context) error {
	r.mu.RLock()
	var allSubscriptions []*Subscription
	for _, subscriberSubs := range r.subscriptions {
		for _, subscription := range subscriberSubs {
			if subscription.IsActive {
				allSubscriptions = append(allSubscriptions, subscription)
			}
		}
	}
	r.mu.RUnlock()

	heartbeatEvent := model.RealtimeEvent{
		Type:           model.EventTypeHeartbeat,
		FullPath:       "",
		Timestamp:      time.Now(),
		SequenceNumber: atomic.AddInt64(&r.sequenceCounter, 1),
	}

	for _, subscription := range allSubscriptions {
		select {
		case subscription.EventChannel <- heartbeatEvent:
			subscription.LastHeartbeat = time.Now()
		case <-ctx.Done():
			return ctx.Err()
		default:
			r.logger.Warn("Heartbeat channel full, skipping",
				zap.String("subscriberID", subscription.SubscriberID),
				zap.String("subscriptionID", string(subscription.SubscriptionID)))
		}
	}

	r.logger.Debug("Heartbeat sent to all subscribers", zap.Int("count", len(allSubscriptions)))
	return nil
}

// UpdateLastHeartbeat updates the last heartbeat time for a subscriber
func (r *realtimeUsecaseImpl) UpdateLastHeartbeat(subscriberID string, subscriptionID model.SubscriptionID) error {
	r.mu.Lock()
	defer r.mu.Unlock()

	if subscriberSubs, exists := r.subscriptions[subscriberID]; exists {
		if subscription, exists := subscriberSubs[subscriptionID]; exists {
			subscription.LastHeartbeat = time.Now()
			return nil
		}
	}
	return errors.NewNotFoundError(fmt.Sprintf("subscription %s not found for subscriber %s", subscriptionID, subscriberID))
}

// CleanupStaleConnections removes subscriptions that haven't received heartbeats
func (r *realtimeUsecaseImpl) CleanupStaleConnections(ctx context.Context, timeout time.Duration) error {
	r.mu.Lock()
	staleSubscriptions := make([]struct {
		subscriberID   string
		subscriptionID model.SubscriptionID
	}, 0)

	cutoff := time.Now().Add(-timeout)
	for subscriberID, subscriberSubs := range r.subscriptions {
		for subscriptionID, subscription := range subscriberSubs {
			if subscription.LastHeartbeat.Before(cutoff) {
				staleSubscriptions = append(staleSubscriptions, struct {
					subscriberID   string
					subscriptionID model.SubscriptionID
				}{subscriberID, subscriptionID})
			}
		}
	}
	r.mu.Unlock()

	// Remove stale subscriptions
	for _, stale := range staleSubscriptions {
		req := UnsubscribeRequest{
			SubscriberID:   stale.subscriberID,
			SubscriptionID: stale.subscriptionID,
		}
		r.Unsubscribe(ctx, req)
	}

	if len(staleSubscriptions) > 0 {
		r.logger.Info("Cleaned up stale connections", zap.Int("count", len(staleSubscriptions)))
	}

	return nil
}

// GetSubscriberCount returns the number of subscribers for a given path
func (r *realtimeUsecaseImpl) GetSubscriberCount(firestorePath string) int {
	r.mu.RLock()
	defer r.mu.RUnlock()

	count := 0
	if pathSubs, exists := r.pathSubscribers[firestorePath]; exists {
		for _, subscriptionIDs := range pathSubs {
			count += len(subscriptionIDs)
		}
	}
	return count
}

// GetActiveSubscriptions returns all active subscriptions for a subscriber
func (r *realtimeUsecaseImpl) GetActiveSubscriptions(subscriberID string) map[model.SubscriptionID]*Subscription {
	r.mu.RLock()
	defer r.mu.RUnlock()

	result := make(map[model.SubscriptionID]*Subscription)
	if subscriberSubs, exists := r.subscriptions[subscriberID]; exists {
		for subscriptionID, subscription := range subscriberSubs {
			if subscription.IsActive {
				// Create a copy to avoid race conditions
				result[subscriptionID] = &Subscription{
					SubscriberID:   subscription.SubscriberID,
					SubscriptionID: subscription.SubscriptionID,
					FirestorePath:  subscription.FirestorePath,
					EventChannel:   subscription.EventChannel,
					CreatedAt:      subscription.CreatedAt,
					LastHeartbeat:  subscription.LastHeartbeat,
					ResumeToken:    subscription.ResumeToken,
					Query:          subscription.Query,
					Options:        subscription.Options,
					IsActive:       subscription.IsActive,
					ConnectionID:   subscription.ConnectionID,
					EventCount:     subscription.EventCount,
					LastEventTime:  subscription.LastEventTime,
				}
			}
		}
	}
	return result
}

// ValidatePermissions revalidates permissions for all active subscriptions
func (r *realtimeUsecaseImpl) ValidatePermissions(ctx context.Context, subscriberID string, permissionValidator PermissionValidator) error {
	r.mu.RLock()
	subscriberSubs, exists := r.subscriptions[subscriberID]
	if !exists {
		r.mu.RUnlock()
		return nil
	}

	var subscriptionsToValidate []*Subscription
	for _, subscription := range subscriberSubs {
		if subscription.IsActive {
			subscriptionsToValidate = append(subscriptionsToValidate, subscription)
		}
	}
	r.mu.RUnlock()

	for _, subscription := range subscriptionsToValidate {
		if err := permissionValidator(subscriberID, subscription.FirestorePath); err != nil {
			// Remove subscription if permission validation fails
			req := UnsubscribeRequest{
				SubscriberID:   subscriberID,
				SubscriptionID: subscription.SubscriptionID,
			}
			r.Unsubscribe(ctx, req)
			r.logger.Warn("Subscription removed due to permission validation failure",
				zap.String("subscriberID", subscriberID),
				zap.String("subscriptionID", string(subscription.SubscriptionID)),
				zap.String("path", subscription.FirestorePath),
				zap.Error(err))
		}
	}

	return nil
}

// GetHealthStatus returns the current health status of the realtime service
func (r *realtimeUsecaseImpl) GetHealthStatus() HealthStatus {
	r.mu.RLock()
	defer r.mu.RUnlock()

	activeSubscriptions := 0
	activeConnections := make(map[string]bool)

	for _, subscriberSubs := range r.subscriptions {
		for _, subscription := range subscriberSubs {
			if subscription.IsActive {
				activeSubscriptions++
				activeConnections[subscription.SubscriberID] = true
			}
		}
	}

	return HealthStatus{
		IsHealthy:           true,
		ActiveSubscriptions: activeSubscriptions,
		ActiveConnections:   len(activeConnections),
		LastHealthCheck:     time.Now(),
		EventStoreSize:      0, // TODO: Implement event store size calculation
	}
}

// GetMetrics returns operational metrics for monitoring
func (r *realtimeUsecaseImpl) GetMetrics() RealtimeMetrics {
	r.mu.RLock()
	defer r.mu.RUnlock()

	activeSubscribers := make(map[string]bool)
	for subscriberID, subscriberSubs := range r.subscriptions {
		for _, subscription := range subscriberSubs {
			if subscription.IsActive {
				activeSubscribers[subscriberID] = true
				break
			}
		}
	}

	return RealtimeMetrics{
		TotalSubscriptions: atomic.LoadInt64(&r.totalSubscriptions),
		TotalEvents:        atomic.LoadInt64(&r.totalEvents),
		ActiveSubscribers:  len(activeSubscribers),
		EventsPerSecond:    0, // TODO: Implement EPS calculation
		AverageLatency:     0, // TODO: Implement latency tracking
		LastMetricsUpdate:  time.Now(),
	}
}

// Helper methods for clean code and separation of concerns

// validateSubscribeRequest validates the subscription request parameters
func (r *realtimeUsecaseImpl) validateSubscribeRequest(req SubscribeRequest) error {
	if req.SubscriberID == "" {
		return errors.NewValidationError("subscriberID cannot be empty")
	}
	if req.SubscriptionID == "" {
		return errors.NewValidationError("subscriptionID cannot be empty")
	}
	if req.FirestorePath == "" {
		return errors.NewValidationError("firestorePath cannot be empty")
	}
	if req.EventChannel == nil {
		return errors.NewValidationError("eventChannel cannot be nil")
	}
	return nil
}

// validateUnsubscribeRequest validates the unsubscribe request parameters
func (r *realtimeUsecaseImpl) validateUnsubscribeRequest(req UnsubscribeRequest) error {
	if req.SubscriberID == "" {
		return errors.NewValidationError("subscriberID cannot be empty")
	}
	if req.SubscriptionID == "" {
		return errors.NewValidationError("subscriptionID cannot be empty")
	}
	return nil
}

// checkSubscriptionLimits checks if the subscriber has reached subscription limits
func (r *realtimeUsecaseImpl) checkSubscriptionLimits(subscriberID string) error {
	if subscriberSubs, exists := r.subscriptions[subscriberID]; exists {
		if len(subscriberSubs) >= MaxSubscriptionsPerClient {
			return errors.NewValidationError(fmt.Sprintf("subscriber %s has reached maximum subscription limit (%d)", subscriberID, MaxSubscriptionsPerClient))
		}
	}
	return nil
}

// isValidFirestorePath validates the Firestore path format
func (r *realtimeUsecaseImpl) isValidFirestorePath(path string) bool {
	// Firestore path should be: projects/{PROJECT_ID}/databases/{DATABASE_ID}/documents/{DOCUMENT_PATH}
	_, err := firestore.ParseFirestorePath(path)
	return err == nil
}

// generateConnectionID generates a unique connection ID for tracking
func (r *realtimeUsecaseImpl) generateConnectionID(subscriberID string, subscriptionID model.SubscriptionID) string {
	return fmt.Sprintf("%s:%s:%d", subscriberID, subscriptionID, time.Now().UnixNano())
}

// addToPathSubscribers adds a subscription to the path subscribers index
func (r *realtimeUsecaseImpl) addToPathSubscribers(firestorePath, subscriberID string, subscriptionID model.SubscriptionID) {
	if r.pathSubscribers[firestorePath] == nil {
		r.pathSubscribers[firestorePath] = make(map[string]map[model.SubscriptionID]bool)
	}
	if r.pathSubscribers[firestorePath][subscriberID] == nil {
		r.pathSubscribers[firestorePath][subscriberID] = make(map[model.SubscriptionID]bool)
	}
	r.pathSubscribers[firestorePath][subscriberID][subscriptionID] = true
}

// removeFromPathSubscribers removes a subscription from the path subscribers index
func (r *realtimeUsecaseImpl) removeFromPathSubscribers(firestorePath, subscriberID string, subscriptionID model.SubscriptionID) {
	if pathSubs, exists := r.pathSubscribers[firestorePath]; exists {
		if subscriberPathSubs, exists := pathSubs[subscriberID]; exists {
			delete(subscriberPathSubs, subscriptionID)
			if len(subscriberPathSubs) == 0 {
				delete(pathSubs, subscriberID)
			}
		}
		if len(pathSubs) == 0 {
			delete(r.pathSubscribers, firestorePath)
		}
	}
}

// sendEventsFromResumeToken sends events from a resume token asynchronously
func (r *realtimeUsecaseImpl) sendEventsFromResumeToken(ctx context.Context, subscription *Subscription, resumeToken model.ResumeToken) {
	events, err := r.eventStore.GetEventsSince(ctx, subscription.FirestorePath, resumeToken)
	if err != nil {
		r.logger.Error("Failed to get events from resume token",
			zap.String("resumeToken", string(resumeToken)),
			zap.Error(err))
		return
	}

	for _, event := range events {
		r.sendEventToSubscription(ctx, event, subscription)
	}
}

// sendEventToSubscription sends an event to a specific subscription with proper filtering
func (r *realtimeUsecaseImpl) sendEventToSubscription(ctx context.Context, event model.RealtimeEvent, subscription *Subscription) {
	if !subscription.IsActive {
		return
	}

	// Apply query filtering if present
	if subscription.Query != nil {
		if !r.matchesQuery(event, subscription.Query) {
			return
		}
	}

	// Set subscription ID in the event
	event.SubscriptionID = string(subscription.SubscriptionID)

	select {
	case subscription.EventChannel <- event:
		// Update subscription metrics
		subscription.EventCount++
		subscription.LastEventTime = time.Now()

		r.logger.Debug("Event sent to subscription",
			zap.String("subscriberID", subscription.SubscriberID),
			zap.String("subscriptionID", string(subscription.SubscriptionID)),
			zap.String("eventType", string(event.Type)))
	case <-ctx.Done():
		return
	default:
		r.logger.Warn("Event channel full, dropping event",
			zap.String("subscriberID", subscription.SubscriberID),
			zap.String("subscriptionID", string(subscription.SubscriptionID)))
	}
}

// matchesQuery checks if an event matches the subscription query following Firestore query semantics
func (r *realtimeUsecaseImpl) matchesQuery(event model.RealtimeEvent, query *model.Query) bool {
	// TODO: Implement comprehensive Firestore query matching logic
	// This should include field filters, ordering, limits, etc.
	// For now, return true to allow all events
	return true
}
