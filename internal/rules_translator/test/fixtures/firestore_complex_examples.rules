// Complex Firebase rules from real-world applications
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // E-commerce system rules
    match /orders/{orderId} {
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.customerId ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'staff']);
      
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.customerId &&
        request.resource.data.status == 'pending' &&
        request.resource.data.items.size() > 0 &&
        request.resource.data.total is number &&
        request.resource.data.total > 0;
      
      allow update: if request.auth != null && 
        ((resource.data.customerId == request.auth.uid && 
          resource.data.status == 'pending' &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['items', 'total'])) ||
         (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'staff'] &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'tracking'])));
    }
    
    // Multi-tenant application
    match /tenants/{tenantId}/users/{userId} {
      allow read, write: if request.auth != null && 
        exists(/databases/$(database)/documents/tenants/$(tenantId)/members/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/tenants/$(tenantId)/members/$(request.auth.uid)).data.active == true;
    }
    
    // Chat system with room permissions
    match /chatRooms/{roomId} {
      allow read: if request.auth != null && 
        request.auth.uid in resource.data.members;
      
      allow update: if request.auth != null && 
        request.auth.uid in resource.data.members &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['lastMessage', 'lastActivity']);
      
      match /messages/{messageId} {
        allow read: if request.auth != null && 
          request.auth.uid in get(/databases/$(database)/documents/chatRooms/$(roomId)).data.members;
        
        allow create: if request.auth != null && 
          request.auth.uid in get(/databases/$(database)/documents/chatRooms/$(roomId)).data.members &&
          request.auth.uid == request.resource.data.senderId &&
          request.resource.data.timestamp == request.time;
        
        allow update: if request.auth != null && 
          request.auth.uid == resource.data.senderId &&
          request.time < resource.data.timestamp + duration.value(300, 's') && // 5 minutes edit window
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['content', 'edited']);
      }
    }
    
    // Document workflow system
    match /documents/{docId} {
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.owner ||
         request.auth.uid in resource.data.editors ||
         request.auth.uid in resource.data.viewers ||
         (resource.data.public == true && resource.data.status == 'published'));
      
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.owner &&
        request.resource.data.status == 'draft' &&
        request.resource.data.createdAt == request.time;
      
      allow update: if request.auth != null && 
        ((request.auth.uid == resource.data.owner) ||
         (request.auth.uid in resource.data.editors && 
          resource.data.status in ['draft', 'review'] &&
          !request.resource.data.diff(resource.data).affectedKeys().hasAny(['owner', 'editors', 'viewers'])));
      
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.owner &&
        resource.data.status in ['draft', 'archived'];
    }
    
    // File upload system with size limits
    match /uploads/{uploadId} {
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.uploader &&
        request.resource.data.size <= 10485760 && // 10MB limit
        request.resource.data.mimeType in ['image/jpeg', 'image/png', 'image/gif', 'application/pdf'] &&
        request.resource.data.filename.matches('.*\\.(jpg|jpeg|png|gif|pdf)$');
      
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.uploader ||
         resource.data.public == true);
      
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.uploader;
    }
    
    // Analytics and logging (write-only)
    match /analytics/{document=**} {
      allow write: if request.auth != null;
      allow read: if false; // Analytics data is write-only
    }
    
    // Configuration with role-based access
    match /config/{configId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' &&
        request.resource.data.lastModified == request.time &&
        request.resource.data.modifiedBy == request.auth.uid;
    }
  }
}
