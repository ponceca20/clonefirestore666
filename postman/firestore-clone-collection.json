{
	"info": {
		"_postman_id": "df7e6f70-5b0c-4f0d-8c3a-6b7e1f2a9d8b",
		"name": "Firestore Clone API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"description": "Collection for testing the Firestore Clone API with multi-tenancy support."
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201 || pm.response.code === 200) {",
									"    try {",
									"        var jsonData = pm.response.json();",
									"        if (jsonData && jsonData.accessToken) {",
									"            pm.environment.set(\"authToken\", jsonData.accessToken);",
									"            console.log(\"Auth token set from register.\");",
									"        }",
									"        if (jsonData && jsonData.refreshToken) {",
									"            pm.environment.set(\"refreshToken\", jsonData.refreshToken);",
									"            console.log(\"Refresh token set from register.\");",
									"        }",
									"        if (jsonData && jsonData.user && jsonData.user.userId) {",
									"            pm.environment.set(\"newUserId\", jsonData.user.userId);",
									"            pm.environment.set(\"currentUserId\", jsonData.user.userId);",
									"            console.log(\"newUserId set to: \" + jsonData.user.userId);",
									"        }",
									"        if (jsonData && jsonData.user && jsonData.user.tenantId) {",
									"             pm.environment.set(\"tenantId\", jsonData.user.tenantId);",
									"             console.log(\"tenantId set from register to: \" + jsonData.user.tenantId);",
									"        }",
									"        if (jsonData && jsonData.user && jsonData.user.organizationId) {",
									"             pm.environment.set(\"organizationId\", jsonData.user.organizationId);",
									"             console.log(\"organizationId set from register to: \" + jsonData.user.organizationId);",
									"        }",
									"    } catch (e) {",
									"        console.log(\"Error parsing response or setting tokens: \" + e);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Organization-ID",
								"value": "{{organizationId}}"
							},
							{
								"key": "X-Tenant-ID",
								"value": "{{tenantId}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"tenantId\": \"{{tenantId}}\",\n  \"organizationId\": \"{{organizationId}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"register"
							]
						},
						"description": "Registers a new user. Sets `authToken`, `refreshToken` and `newUserId` on success."
					},
					"response": []
				},
				{
					"name": "Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    try {",
									"        var jsonData = pm.response.json();",
									"        if (jsonData && jsonData.accessToken) {",
									"            pm.environment.set(\"authToken\", jsonData.accessToken);",
									"            console.log(\"Auth token set from login.\");",
									"        }",
									"        if (jsonData && jsonData.refreshToken) {",
									"            pm.environment.set(\"refreshToken\", jsonData.refreshToken);",
									"            console.log(\"Refresh token set from login.\");",
									"        }",
									"        if (jsonData && jsonData.user && jsonData.user.userId) {",
									"            pm.environment.set(\"currentUserId\", jsonData.user.userId);",
									"            console.log(\"currentUserId set to: \" + jsonData.user.userId);",
									"        }",
									"        if (jsonData && jsonData.user && jsonData.user.tenantId) {",
									"             pm.environment.set(\"tenantId\", jsonData.user.tenantId);",
									"             console.log(\"tenantId set from login to: \" + jsonData.user.tenantId);",
									"        }",
									"        if (jsonData && jsonData.user && jsonData.user.organizationId) {",
									"             pm.environment.set(\"organizationId\", jsonData.user.organizationId);",
									"             console.log(\"organizationId set from login to: \" + jsonData.user.organizationId);",
									"        }",
									"    } catch (e) {",
									"        console.log(\"Error parsing response or setting tokens: \" + e);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Organization-ID",
								"value": "{{organizationId}}"
							},
							{
								"key": "X-Tenant-ID",
								"value": "{{tenantId}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\",\n  \"tenantId\": \"{{tenantId}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "Logs in an existing user. Sets `authToken` and `refreshToken` on success."
					},
					"response": []
				},
				{
					"name": "Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    try {",
									"        var jsonData = pm.response.json();",
									"        if (jsonData && jsonData.accessToken) {",
									"            pm.environment.set(\"authToken\", jsonData.accessToken);",
									"            console.log(\"Auth token refreshed.\");",
									"        }",
									"        if (jsonData && jsonData.refreshToken) {",
									"            pm.environment.set(\"refreshToken\", jsonData.refreshToken);",
									"            console.log(\"New refresh token set.\");",
									"        }",
									"    } catch (e) {",
									"        console.log(\"Error parsing response or setting tokens: \" + e);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/refresh",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"refresh"
							]
						},
						"description": "Refreshes the authentication token using a refresh token."
					},
					"response": []
				},
				{
					"name": "Logout User",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/auth/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"logout"
							]
						},
						"description": "Logs out the current user. Requires authentication."
					},
					"response": []
				},
				{
					"name": "Get Current User (Me)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/auth/me",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"me"
							]
						},
						"description": "Retrieves the profile of the currently authenticated user."
					},
					"response": []
				},
				{
					"name": "Update Current User (Me)",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"UpdatedFirstName\",\n  \"lastName\": \"UpdatedLastName\",\n  \"phone\": \"1234567890\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/me",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"me"
							]
						},
						"description": "Updates the profile of the currently authenticated user."
					},
					"response": []
				},
				{
					"name": "Change Password",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"oldPassword\": \"{{userPassword}}\",\n  \"newPassword\": \"NewPassword123!\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/change-password",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"change-password"
							]
						},
						"description": "Changes the password for the currently authenticated user."
					},
					"response": []
				},
				{
					"name": "Admin",
					"item": [
						{
							"name": "List Users (Admin)",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{authToken}}"
									},
									{
										"key": "X-Tenant-ID",
										"value": "{{tenantId}}"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/auth/admin/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"admin",
										"users"
									]
								},
								"description": "Lists all users within the specified tenant. Requires admin role."
							},
							"response": []
						},
						{
							"name": "Get User by ID (Admin)",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{authToken}}"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/auth/admin/users/{{userIdToManage}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"admin",
										"users",
										"{{userIdToManage}}"
									]
								},
								"description": "Retrieves a specific user by ID. Requires admin role."
							},
							"response": []
						},
						{
							"name": "Delete User (Admin)",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{authToken}}"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/auth/admin/users/{{userIdToManage}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"admin",
										"users",
										"{{userIdToManage}}"
									]
								},
								"description": "Deletes a specific user by ID. Requires admin role."
							},
							"response": []
						}
					],
					"description": "User management operations restricted to administrators."
				}
			],
			"description": "Authentication related endpoints"
		},
		{
			"name": "Organizations",
			"item": [
				{
					"name": "Create Organization",
					"event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "if (pm.response.code === 201) {",
                                    "    try {",
                                    "        var jsonData = pm.response.json();",
                                    "        if (jsonData && jsonData.id) {",
                                    "            pm.environment.set(\"organizationId\", jsonData.id);",
                                    "            console.log(\"organizationId set to: \" + jsonData.id);",
                                    "        }",
                                    "    } catch (e) {",
                                    "        console.log(\"Error parsing response or setting organizationId: \" + e);",
                                    "    }",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"My New Organization\",\n  \"ownerId\": \"{{currentUserId}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/organizations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations"
							]
						},
						"description": "Creates a new organization. Sets `organizationId` on success."
					},
					"response": []
				},
				{
					"name": "List Organizations",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/organizations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations"
							]
						},
						"description": "Retrieves a list of organizations."
					},
					"response": []
				},
				{
					"name": "Get Organization",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/organizations/{{organizationId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{organizationId}}"
							]
						},
						"description": "Retrieves a specific organization by ID."
					},
					"response": []
				},
				{
					"name": "Update Organization",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Updated Organization Name\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{organizationId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{organizationId}}"
							]
						},
						"description": "Updates an existing organization."
					},
					"response": []
				},
				{
					"name": "Delete Organization",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/organizations/{{organizationId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{organizationId}}"
							]
						},
						"description": "Deletes an organization."
					},
					"response": []
				},
				{
					"name": "Add User to Organization",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": \"{{userIdToManage}}\",\n  \"role\": \"member\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{organizationId}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{organizationId}}",
								"users"
							]
						},
						"description": "Adds a user to an organization."
					},
					"response": []
				},
				{
					"name": "Remove User from Organization",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/organizations/{{organizationId}}/users/{{userIdToManage}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{organizationId}}",
								"users",
								"{{userIdToManage}}"
							]
						},
						"description": "Removes a user from an organization."
					},
					"response": []
				},
				{
					"name": "List Users in Organization",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/organizations/{{organizationId}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{organizationId}}",
								"users"
							]
						},
						"description": "Lists all users in an organization."
					},
					"response": []
				}
			],
			"description": "Endpoints for managing organizations"
		},
		{
			"name": "Firestore Operations",
			"item": [
				{
					"name": "Projects",
					"item": [
						{
							"name": "Create Project",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 201) {",
											"    try {",
											"        var jsonData = pm.response.json();",
											"        if (jsonData && jsonData.id) {",
											"            pm.environment.set(\"projectId\", jsonData.id);",
											"            console.log(\"projectId set to: \" + jsonData.id);",
											"        }",
											"    } catch (e) {",
											"        console.log(\"Error parsing response or setting projectId: \" + e);",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{authToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"My New Project\",\n  \"displayName\": \"My New Project Display Name\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/organizations/{{organizationId}}/projects",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"projects"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Projects",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{authToken}}"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/organizations/{{organizationId}}/projects",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"projects"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Project",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{authToken}}"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/organizations/{{organizationId}}/projects/{{projectId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"projects",
										"{{projectId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Project",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{authToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"displayName\": \"Updated Project Display Name\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/organizations/{{organizationId}}/projects/{{projectId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"projects",
										"{{projectId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Project",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{authToken}}"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/organizations/{{organizationId}}/projects/{{projectId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"projects",
										"{{projectId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Databases",
					"item": [
						{
							"name": "Create Database",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 201) {",
											"    try {",
											"        var jsonData = pm.response.json();",
											"        // Assuming the ID is part of the name field like 'projects/proj/databases/db-id'",
											"        if (jsonData && jsonData.name) {",
											"            const parts = jsonData.name.split('/');",
											"            const dbId = parts[parts.length - 1];",
											"            pm.environment.set(\"databaseId\", dbId);",
											"            console.log(\"databaseId set to: \" + dbId);",
											"        }",
											"    } catch (e) {",
											"        console.log(\"Error parsing response or setting databaseId: \" + e);",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{authToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": \"USER_DATABASE\",\n  \"name_override\": \"my-custom-db-id\" \n}"
								},
								"url": {
									"raw": "{{baseUrl}}/organizations/{{organizationId}}/projects/{{projectId}}/databases",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"projects",
										"{{projectId}}",
										"databases"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Databases",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{authToken}}"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/organizations/{{organizationId}}/projects/{{projectId}}/databases",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"projects",
										"{{projectId}}",
										"databases"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Database",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{authToken}}"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/organizations/{{organizationId}}/projects/{{projectId}}/databases/{{databaseId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"projects",
										"{{projectId}}",
										"databases",
										"{{databaseId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Database (Patch)",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{authToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"etag\": \"some-etag-if-needed\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/organizations/{{organizationId}}/projects/{{projectId}}/databases/{{databaseId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"projects",
										"{{projectId}}",
										"databases",
										"{{databaseId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Documents",
					"item": [
						{
							"name": "List Documents in Collection",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{authToken}}"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/organizations/{{organizationId}}/projects/{{projectId}}/databases/{{databaseId}}/documents/{{collectionId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"projects",
										"{{projectId}}",
										"databases",
										"{{databaseId}}",
										"documents",
										"{{collectionId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Document (Auto ID)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 201 || pm.response.code === 200) { // Firestore Create can return 200 for existing path",
											"    try {",
											"        var jsonData = pm.response.json();",
											"        if (jsonData && jsonData.name) {",
											"            const parts = jsonData.name.split('/');",
											"            const docId = parts[parts.length - 1];",
											"            pm.environment.set(\"documentId\", docId);",
											"            console.log(\"documentId (auto) set to: \" + docId);",
											"        }",
											"    } catch (e) {",
											"        console.log(\"Error parsing response or setting documentId: \" + e);",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{authToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"fields\": {\n    \"message\": {\n      \"stringValue\": \"Hello from Postman!\"\n    },\n    \"timestamp\": {\n      \"timestampValue\": \"{{$isoTimestamp}}\"\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/organizations/{{organizationId}}/projects/{{projectId}}/databases/{{databaseId}}/documents/{{collectionId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"projects",
										"{{projectId}}",
										"databases",
										"{{databaseId}}",
										"documents",
										"{{collectionId}}"
									],
									"query": [
										{
											"key": "documentId",
											"value": null,
											"disabled": true 
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create/Set Document (Specific ID)",
							"request": {
								"method": "POST", 
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{authToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"fields\": {\n    \"title\": {\n      \"stringValue\": \"My Specific Document\"\n    },\n    \"priority\": {\n      \"integerValue\": \"1\"\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/organizations/{{organizationId}}/projects/{{projectId}}/databases/{{databaseId}}/documents/{{collectionId}}/{{documentId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"projects",
										"{{projectId}}",
										"databases",
										"{{databaseId}}",
										"documents",
										"{{collectionId}}",
										"{{documentId}}"
									]
								},
								"description": "Creates or overwrites a document with a specific ID. Firestore uses POST for this, or PATCH for updates."
							},
							"response": []
						},
						{
							"name": "Get Document",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{authToken}}"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/organizations/{{organizationId}}/projects/{{projectId}}/databases/{{databaseId}}/documents/{{collectionId}}/{{documentId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"projects",
										"{{projectId}}",
										"databases",
										"{{databaseId}}",
										"documents",
										"{{collectionId}}",
										"{{documentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Document (PATCH)",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{authToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"fields\": {\n    \"status\": {\n      \"stringValue\": \"updated\"\n    },\n    \"lastUpdated\": {\n        \"timestampValue\": \"{{$isoTimestamp}}\"\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/organizations/{{organizationId}}/projects/{{projectId}}/databases/{{databaseId}}/documents/{{collectionId}}/{{documentId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"projects",
										"{{projectId}}",
										"databases",
										"{{databaseId}}",
										"documents",
										"{{collectionId}}",
										"{{documentId}}"
									],
									"query": [
										{
											"key": "updateMask.fieldPaths",
											"value": "status"
										},
										{
											"key": "updateMask.fieldPaths",
											"value": "lastUpdated"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Document",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{authToken}}"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/organizations/{{organizationId}}/projects/{{projectId}}/databases/{{databaseId}}/documents/{{collectionId}}/{{documentId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"projects",
										"{{projectId}}",
										"databases",
										"{{databaseId}}",
										"documents",
										"{{collectionId}}",
										"{{documentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sub-Collections",
							"item": [
								{
									"name": "List Sub-Collection Documents",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/organizations/{{organizationId}}/projects/{{projectId}}/databases/{{databaseId}}/documents/{{collectionId}}/{{documentId}}/{{subCollectionId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"projects",
												"{{projectId}}",
												"databases",
												"{{databaseId}}",
												"documents",
												"{{collectionId}}",
												"{{documentId}}",
												"{{subCollectionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Sub-Collection Document (Auto ID)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code === 201 || pm.response.code === 200) {",
													"    try {",
													"        var jsonData = pm.response.json();",
													"        if (jsonData && jsonData.name) {",
													"            const parts = jsonData.name.split('/');",
													"            const subDocId = parts[parts.length - 1];",
													"            pm.environment.set(\"subDocumentId\", subDocId);",
													"            console.log(\"subDocumentId (auto) set to: \" + subDocId);",
													"        }",
													"    } catch (e) {",
													"        console.log(\"Error parsing response or setting subDocumentId: \" + e);",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{authToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"fields\": {\n    \"detail\": {\n      \"stringValue\": \"Sub-document content\"\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organizations/{{organizationId}}/projects/{{projectId}}/databases/{{databaseId}}/documents/{{collectionId}}/{{documentId}}/{{subCollectionId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"projects",
												"{{projectId}}",
												"databases",
												"{{databaseId}}",
												"documents",
												"{{collectionId}}",
												"{{documentId}}",
												"{{subCollectionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Sub-Collection Document",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/organizations/{{organizationId}}/projects/{{projectId}}/databases/{{databaseId}}/documents/{{collectionId}}/{{documentId}}/{{subCollectionId}}/{{subDocumentId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"projects",
												"{{projectId}}",
												"databases",
												"{{databaseId}}",
												"documents",
												"{{collectionId}}",
												"{{documentId}}",
												"{{subCollectionId}}",
												"{{subDocumentId}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Indexes",
					"item": [
						{
							"name": "Create Index",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 200) { // Create index returns LRO, check for name in operation",
											"    try {",
											"        var jsonData = pm.response.json();",
											"        if (jsonData && jsonData.name) {",
											"            // LRO name, not index ID directly. Index ID is part of request.",
											"            console.log(\"Index creation operation started: \" + jsonData.name);",
											"        }",
											"    } catch (e) {",
											"        console.log(\"Error parsing response for index creation: \" + e);",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{authToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"queryScope\": \"COLLECTION\",\n  \"fields\": [\n    {\n      \"fieldPath\": \"status\",\n      \"order\": \"ASCENDING\"\n    },\n    {\n      \"fieldPath\": \"timestamp\",\n      \"order\": \"DESCENDING\"\n    }\n  ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/organizations/{{organizationId}}/projects/{{projectId}}/databases/{{databaseId}}/collectionGroups/{{collectionId}}/indexes?indexId={{indexId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"projects",
										"{{projectId}}",
										"databases",
										"{{databaseId}}",
										"collectionGroups",
										"{{collectionId}}",
										"indexes"
									],
									"query": [
										{
											"key": "indexId",
											"value": "{{indexId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List Indexes",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{authToken}}"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/organizations/{{organizationId}}/projects/{{projectId}}/databases/{{databaseId}}/collectionGroups/{{collectionId}}/indexes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"projects",
										"{{projectId}}",
										"databases",
										"{{databaseId}}",
										"collectionGroups",
										"{{collectionId}}",
										"indexes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Index",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{authToken}}"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/organizations/{{organizationId}}/projects/{{projectId}}/databases/{{databaseId}}/collectionGroups/{{collectionId}}/indexes/{{indexId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"projects",
										"{{projectId}}",
										"databases",
										"{{databaseId}}",
										"collectionGroups",
										"{{collectionId}}",
										"indexes",
										"{{indexId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Index",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{authToken}}"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/organizations/{{organizationId}}/projects/{{projectId}}/databases/{{databaseId}}/collectionGroups/{{collectionId}}/indexes/{{indexId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"projects",
										"{{projectId}}",
										"databases",
										"{{databaseId}}",
										"collectionGroups",
										"{{collectionId}}",
										"indexes",
										"{{indexId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Transactions",
					"item": [
						{
							"name": "Begin Transaction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 200) {",
											"    try {",
											"        var jsonData = pm.response.json();",
											"        if (jsonData && jsonData.transaction) {",
											"            pm.environment.set(\"transactionId\", jsonData.transaction);",
											"            console.log(\"transactionId set to: \" + jsonData.transaction);",
											"        }",
											"    } catch (e) {",
											"        console.log(\"Error parsing response or setting transactionId: \" + e);",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{authToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"options\": {\n    \"readWrite\": {}\n  }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/organizations/{{organizationId}}/projects/{{projectId}}/databases/{{databaseId}}/documents:beginTransaction",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"projects",
										"{{projectId}}",
										"databases",
										"{{databaseId}}",
										"documents:beginTransaction"
									]
								}
							},
							"response": []
						},
						{
							"name": "Commit Transaction",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{authToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"transaction\": \"{{transactionId}}\",\n  \"writes\": [\n    {\n      \"update\": {\n        \"name\": \"projects/{{projectId}}/databases/{{databaseId}}/documents/{{collectionId}}/{{documentId}}\",\n        \"fields\": {\n          \"status\": {\n            \"stringValue\": \"committed via transaction\"\n          }\n        }\n      }\n    }\n  ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/organizations/{{organizationId}}/projects/{{projectId}}/databases/{{databaseId}}/documents:commit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"projects",
										"{{projectId}}",
										"databases",
										"{{databaseId}}",
										"documents:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Rollback Transaction",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{authToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"transaction\": \"{{transactionId}}\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/organizations/{{organizationId}}/projects/{{projectId}}/databases/{{databaseId}}/documents:rollback",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"projects",
										"{{projectId}}",
										"databases",
										"{{databaseId}}",
										"documents:rollback"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Atomic Operations",
					"item": [
						{
							"name": "Increment Field",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{authToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"writes\": [\n    {\n      \"transform\": {\n        \"document\": \"projects/{{projectId}}/databases/{{databaseId}}/documents/{{collectionId}}/{{documentId}}\",\n        \"fieldTransforms\": [\n          {\n            \"fieldPath\": \"counterField\",\n            \"increment\": {\n              \"integerValue\": \"1\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/organizations/{{organizationId}}/projects/{{projectId}}/databases/{{databaseId}}/documents/{{collectionId}}/{{documentId}}:increment",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"projects",
										"{{projectId}}",
										"databases",
										"{{databaseId}}",
										"documents",
										"{{collectionId}}",
										"{{documentId}}:increment"
									]
								},
								"description": "Atomically increments a numeric field. This specific path might need adjustment based on actual implementation; Firestore uses BatchWrite with a transform for increments."
							},
							"response": []
						}
					]
				}
			],
			"description": "Endpoints for Firestore data operations, nested under organizations, projects, and databases."
		},
		{
			"name": "WebSocket (Realtime Listen)",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{wsBaseUrl}}{{wsPath}}?token={{authToken}}&organizationId={{organizationId}}&projectId={{projectId}}&databaseId={{databaseId}}&documentPath=projects/{{projectId}}/databases/{{databaseId}}/documents/{{collectionId}}/{{documentId}}",
					"host": [
						"{{wsBaseUrl}}"
					],
					"path": [
						"{{wsPath}}"
					],
					"query": [
						{
							"key": "token",
							"value": "{{authToken}}"
						},
						{
							"key": "organizationId",
							"value": "{{organizationId}}"
						},
						{
							"key": "projectId",
							"value": "{{projectId}}"
						},
						{
							"key": "databaseId",
							"value": "{{databaseId}}"
						},
						{
							"key": "documentPath",
							"value": "projects/{{projectId}}/databases/{{databaseId}}/documents/{{collectionId}}/{{documentId}}"
						}
					]
				},
				"description": "Establishes a WebSocket connection to listen for realtime updates. This is a GET request that will be upgraded to WebSocket. Use Postman's WebSocket request type for actual testing."
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{authToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3030/api/v1",
			"type": "string"
		}
	]
}
