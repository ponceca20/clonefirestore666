
{
    "info": {
        "_postman_id": "c1d2e3f4-a5b6-7890-1234-567890abcdef",
        "name": "Firestore Clone - General API",
        "description": "Postman collection for general API endpoints including health, metrics, and WebSocket for Firestore Clone. Uses {{baseURL}} and {{wsBaseUrl}} from environment.",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
        {
            "name": "Server Health & Metrics",
            "item": [
                {
                    "name": "Health Check",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "https://{{baseURL}}/health",
                            "host": [
                                "{{baseURL}}"
                            ],
                            "path": [
                                "health"
                            ]
                        },
                        "description": "Checks the health status of the server and its dependencies (e.g., MongoDB connection)."
                    },
                    "response": []
                },
                {
                    "name": "Application Metrics",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "https://{{baseURL}}/metrics",
                            "host": [
                                "{{baseURL}}"
                            ],
                            "path": [
                                "metrics"
                            ]
                        },
                        "description": "Retrieves application performance metrics (e.g., via Prometheus endpoint if integrated with Fiber monitor)."
                    },
                    "response": []
                }
            ],
            "description": "Endpoints for monitoring server health and performance."
        },
        {
            "name": "WebSocket Realtime Listener",
            "item": [
                {
                    "name": "Connect to Realtime Listener",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Sec-WebSocket-Protocol",
                                "value": "echo-protocol"
                            }
                        ],
                        "url": {
                            "raw": "{{wsBaseUrl}}/api/v1/ws/listen",
                            "protocol": "ws",
                            "host": [
                                "{{wsHost}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "ws",
                                "listen"
                            ],
                            "query": [
                                {
                                    "key": "token",
                                    "value": "{{accessToken}}",
                                    "description": "Authentication token for WebSocket connection"
                                }
                            ]
                        },
                        "description": "Establishes a WebSocket connection to listen for real-time updates. \n**Note:** Postman requires a running WebSocket server to connect. \n**Authentication:** Typically handled via query parameter or initial message after connection, depending on server implementation. This example uses a 'token' query parameter."
                    },
                    "response": []
                }
            ],
            "description": "WebSocket endpoint for real-time data subscriptions. \nTo use this in Postman: \n1. Ensure your server is running and the WebSocket endpoint is active. \n2. Replace `{{wsBaseUrl}}` (e.g., `ws://localhost:3030`) and `{{accessToken}}` in your environment. \n3. Click 'Connect'. \n4. Once connected, you can send JSON messages to subscribe/unsubscribe to paths. Example message: `{\"type\":\"subscribe\",\"data\":{\"path\":\"organizations/ORG_ID/projects/PROJ_ID/databases/DB_ID/collections/myCollection/myDocId\"}}`"
        }
    ],
    "auth": {
        "type": "noauth"
    },
    "variable": [
        {
            "key": "baseURL",
            "value": "localhost:3030",
            "type": "string",
            "description": "Base URL for HTTP API calls. Override with environment."
        },
        {
            "key": "wsBaseUrl",
            "value": "ws://localhost:3030",
            "type": "string",
            "description": "Base URL for WebSocket connections. Override with environment."
        },
        {
            "key": "wsHost",
            "value": "localhost:3030",
            "type": "string",
            "description": "Host for WebSocket connections (used if wsBaseUrl is not a full URL). Override with environment."
        },
        {
            "key": "accessToken",
            "value": "",
            "type": "string",
            "description": "Access token for authenticated requests, including WebSocket if needed."
        }
    ]
}
