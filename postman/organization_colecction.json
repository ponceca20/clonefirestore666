{
	"info": {
		"_postman_id": "d4e7c8b1-5f6a-4b9c-8d2e-1a3b5c7d9e0f",
		"name": "Organization Management API",
		"description": "Postman collection for testing the Organization Management API routes with multi-tenancy support.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Organizations",
			"item": [
				{
					"name": "Create Organization",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							},
							{
								"key": "X-Tenant-ID",
								"value": "{{tenantId}}",
								"type": "text",
								"description": "Tenant ID, likely required for organization creation context"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"organizationId\": \"{{organizationId}}\",\n  \"displayName\": \"Test Organization\",\n  \"billingEmail\": \"admin@testorg.com\",\n  \"description\": \"A test organization for API testing\",\n  \"adminEmails\": [\"admin@testorg.com\", \"support@testorg.com\"],\n  \"defaultLocation\": \"us-central1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Organizations",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/organizations?limit=10&offset=0",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations"
							],
							"query": [
								{
									"key": "limit",
									"value": "10",
									"description": "Number of organizations to return"
								},
								{
									"key": "offset",
									"value": "0",
									"description": "Number of organizations to skip"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Organization",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/organizations/{{organizationId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{organizationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Organization",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Updated Test Organization\",\n  \"description\": \"An updated test organization for API testing\",\n  \"settings\": {\n    \"plan\": \"enterprise\",\n    \"features\": [\"firestore\", \"analytics\", \"storage\", \"ml\"]\n  },\n  \"contactInfo\": {\n    \"email\": \"admin@updatedtestorg.com\",\n    \"phone\": \"+1-555-0124\"\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{organizationId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{organizationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Organization",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/organizations/{{organizationId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{organizationId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Organization Scoped",
			"item": [
				{
					"name": "List Organization Projects",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							},
							{
								"key": "X-Tenant-ID",
								"value": "{{tenantId}}",
								"type": "text",
								"description": "Required by tenant middleware"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/organizations/{{organizationId}}/projects?limit=10&offset=0",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{organizationId}}",
								"projects"
							],
							"query": [
								{
									"key": "limit",
									"value": "10",
									"description": "Number of projects to return"
								},
								{
									"key": "offset",
									"value": "0",
									"description": "Number of projects to skip"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Organization Usage",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							},
							{
								"key": "X-Tenant-ID",
								"value": "{{tenantId}}",
								"type": "text",
								"description": "Required by tenant middleware"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/organizations/{{organizationId}}/usage?period=monthly&start_date=2025-01-01&end_date=2025-01-31",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{organizationId}}",
								"usage"
							],
							"query": [
								{
									"key": "period",
									"value": "monthly",
									"description": "Usage period (daily, weekly, monthly, yearly)"
								},
								{
									"key": "start_date",
									"value": "2025-01-01",
									"description": "Start date for usage report (YYYY-MM-DD)"
								},
								{
									"key": "end_date",
									"value": "2025-01-31",
									"description": "End date for usage report (YYYY-MM-DD)"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{authToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Pre-request script to ensure auth token is available",
					"if (!pm.environment.get('authToken')) {",
					"    console.warn('Warning: authToken is empty. Please authenticate first.');",
					"}",
					"",
					"// Set dynamic organizationId if needed",
					"if (!pm.environment.get('organizationId')) {",
					"    pm.environment.set('organizationId', 'my-default-org');",
					"}",
					"",
					"// Set dynamic tenantId if needed",
					"if (!pm.environment.get('tenantId')) {",
					"    pm.environment.set('tenantId', 'my-default-tenant');",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test script for all requests",
					"pm.test('Response status is successful', function () {",
					"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
					"});",
					"",
					"pm.test('Response time is acceptable', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);",
					"});",
					"",
					"// Store organizationId from response if available",
					"if (pm.response.code === 201 && pm.response.json() && pm.response.json().organizationId) {",
					"    pm.environment.set('organizationId', pm.response.json().organizationId);",
					"    console.log('Stored organizationId:', pm.response.json().organizationId);",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "apiVersion",
			"value": "v1",
			"type": "string"
		},
		{
			"key": "contentType",
			"value": "application/json",
			"type": "string"
		}
	]
}