{
	"info": {
		"_postman_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef",
		"name": "Auth Service API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"description": "Postman collection for testing the Authentication Service API routes."
	},
	"item": [
		{
			"name": "Register User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code === 201 || pm.response.code === 200) {",
							"    try {",
							"        var jsonData = pm.response.json();",
							"        if (jsonData && jsonData.accessToken) {",
							"            pm.environment.set(\"authToken\", jsonData.accessToken);",
							"            console.log(\"Auth token set from register.\");",
							"        }",
							"        if (jsonData && jsonData.refreshToken) {",
							"            pm.environment.set(\"refreshToken\", jsonData.refreshToken);",
							"            console.log(\"Refresh token set from register.\");",
							"        }",
							"        if (jsonData && jsonData.user && jsonData.user.userId) {",
							"            pm.environment.set(\"newUserId\", jsonData.user.userId);",
							"            pm.environment.set(\"currentUserId\", jsonData.user.userId);",
							"            console.log(\"newUserId set to: \" + jsonData.user.userId);",
							"        }",
							"        if (jsonData && jsonData.user && jsonData.user.tenantId) {",
							"             pm.environment.set(\"tenantId\", jsonData.user.tenantId);",
							"             console.log(\"tenantId set from register to: \" + jsonData.user.tenantId);",
							"        }",
							"        if (jsonData && jsonData.user && jsonData.user.organizationId) {",
							"             pm.environment.set(\"organizationId\", jsonData.user.organizationId);",
							"             console.log(\"organizationId set from register to: \" + jsonData.user.organizationId);",
							"        }",
							"    } catch (e) {",
							"        console.log(\"Error parsing response or setting tokens: \" + e);",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "X-Tenant-ID",
						"value": "{{tenantId}}"
					},
					{
						"key": "X-Organization-ID",
						"value": "{{organizationId}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"tenantId\": \"{{tenantId}}\",\n  \"organizationId\": \"{{organizationId}}\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/auth/register",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"register"
					]
				},
				"description": "Registers a new user. Sets `authToken`, `refreshToken`, `newUserId`, `tenantId`, and `organizationId` on success."
			},
			"response": []
		},
		{
			"name": "Login User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code === 200) {",
							"    try {",
							"        var jsonData = pm.response.json();",
							"        if (jsonData && jsonData.accessToken) {",
							"            pm.environment.set(\"authToken\", jsonData.accessToken);",
							"            console.log(\"Auth token set from login.\");",
							"        }",
							"        if (jsonData && jsonData.refreshToken) {",
							"            pm.environment.set(\"refreshToken\", jsonData.refreshToken);",
							"            console.log(\"Refresh token set from login.\");",
							"        }",
							"        if (jsonData && jsonData.user && jsonData.user.userId) {",
							"            pm.environment.set(\"currentUserId\", jsonData.user.userId);",
							"            console.log(\"currentUserId set to: \" + jsonData.user.userId);",
							"        }",
							"        if (jsonData && jsonData.user && jsonData.user.tenantId) {",
							"             pm.environment.set(\"tenantId\", jsonData.user.tenantId);",
							"             console.log(\"tenantId set from login to: \" + jsonData.user.tenantId);",
							"        }",
							"        if (jsonData && jsonData.user && jsonData.user.organizationId) {",
							"             pm.environment.set(\"organizationId\", jsonData.user.organizationId);",
							"             console.log(\"organizationId set from login to: \" + jsonData.user.organizationId);",
							"        }",
							"    } catch (e) {",
							"        console.log(\"Error parsing response or setting tokens: \" + e);",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "X-Tenant-ID",
						"value": "{{tenantId}}"
					},
					{
						"key": "X-Organization-ID",
						"value": "{{organizationId}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\",\n  \"tenantId\": \"{{tenantId}}\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/auth/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"login"
					]
				},
				"description": "Logs in an existing user. Sets `authToken`, `refreshToken`, `currentUserId`, `tenantId`, and `organizationId` on success."
			},
			"response": []
		},
		{
			"name": "Refresh Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code === 200) {",
							"    try {",
							"        var jsonData = pm.response.json();",
							"        if (jsonData && jsonData.accessToken) {",
							"            pm.environment.set(\"authToken\", jsonData.accessToken);",
							"            console.log(\"Auth token refreshed.\");",
							"        }",
							"        if (jsonData && jsonData.refreshToken) {",
							"            pm.environment.set(\"refreshToken\", jsonData.refreshToken);",
							"            console.log(\"New refresh token set.\");",
							"        }",
							"    } catch (e) {",
							"        console.log(\"Error parsing response or setting tokens: \" + e);",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/auth/refresh",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"refresh"
					]
				},
				"description": "Refreshes the authentication token using a refresh token."
			},
			"response": []
		},
		{
			"name": "Logout User",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{authToken}}"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/auth/logout",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"logout"
					]
				},
				"description": "Logs out the current user. Requires authentication."
			},
			"response": []
		},
		{
			"name": "Get Current User (Me)",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{authToken}}"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/auth/me",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"me"
					]
				},
				"description": "Retrieves the profile of the currently authenticated user."
			},
			"response": []
		},
		{
			"name": "Update Current User (Me)",
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{authToken}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"firstName\": \"UpdatedFirstName\",\n  \"lastName\": \"UpdatedLastName\",\n  \"phone\": \"1234567890\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/auth/me",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"me"
					]
				},
				"description": "Updates the profile of the currently authenticated user."
			},
			"response": []
		},
		{
			"name": "Change Password",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{authToken}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"oldPassword\": \"{{userPassword}}\",\n  \"newPassword\": \"NewPassword123!\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/auth/change-password",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"change-password"
					]
				},
				"description": "Changes the password for the currently authenticated user."
			},
			"response": []
		},
		{
			"name": "Admin",
			"item": [
				{
					"name": "List Users (Admin)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							},
							{
								"key": "X-Tenant-ID",
								"value": "{{tenantId}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/auth/admin/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"admin",
								"users"
							]
						},
						"description": "Lists all users within the specified tenant. Requires admin role."
					},
					"response": []
				},
				{
					"name": "Get User by ID (Admin)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/auth/admin/users/{{userIdToManage}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"admin",
								"users",
								"{{userIdToManage}}"
							]
						},
						"description": "Retrieves a specific user by ID. Requires admin role."
					},
					"response": []
				},
				{
					"name": "Delete User (Admin)",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/auth/admin/users/{{userIdToManage}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"admin",
								"users",
								"{{userIdToManage}}"
							]
						},
						"description": "Deletes a specific user by ID. Requires admin role."
					},
					"response": []
				}
			],
			"description": "User management operations restricted to administrators."
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{authToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// pm.environment.set(\"userEmail\", \"testuser_\" + Date.now() + \"@example.com\");",
					"// pm.environment.set(\"userPassword\", \"Password123!\");",
					"// pm.environment.set(\"tenantId\", \"default-tenant\");",
					"// pm.environment.set(\"organizationId\", \"default-org\");"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3030/api/v1",
			"type": "string"
		},
		{
			"key": "userEmail",
			"value": "user@example.com",
			"type": "string"
		},
		{
			"key": "userPassword",
			"value": "password123",
			"type": "string"
		},
		{
			"key": "tenantId",
			"value": "your-tenant-id",
			"type": "string"
		},
		{
			"key": "organizationId",
			"value": "your-organization-id",
			"type": "string"
		},
		{
			"key": "userIdToManage",
			"value": "some-user-id",
			"type": "string"
		}
	]
}
